#include	"Collider.h"


/*! =====================================================================================
@fn		コンストラクタ
@param	void
====================================================================================== */
Collider::Collider(GameObject* const _pParent) {
	m_pGameObject = _pParent;
	m_colliderID = CollisionID::NOT_INITIALIZED;
}

/*! =====================================================================================
@fn		デストラクタ
@param	void
====================================================================================== */
Collider::~Collider() {
}

/*! =====================================================================================
@brief	初期化（衝突判定対象設定）
@param	衝突判定を行う対象のColliderIdentifier（コライダーID）の論理和をマスクとして渡してください
@return void
====================================================================================== */
void Collider::Initialize(const ColliderIdentifier & _collisionMask) {
	m_collisionMask = _collisionMask;
}

/*! =====================================================================================
@brief	コライダーID取得
@param	void
@return ColliderIdentifier
====================================================================================== */
const ColliderIdentifier & Collider::GetColliderID() const {
	return m_colliderID;
}

/*! =====================================================================================
@brief	衝突情報取得
@param	void
@return CollisionData
====================================================================================== */
const CollisionData & Collider::GetCollisionData() const {
	return m_collisionData;
}



/*! =====================================================================================
@fn		コンストラクタ
@param	void
====================================================================================== */
ColliderList::ColliderList() {
}

/*! =====================================================================================
@fn		デストラクタ
@param	void
====================================================================================== */
ColliderList::~ColliderList() {
	for (auto itr = begin(); itr != end(); itr++) {
		SafeDelete((*itr));
	}
}

/*! =====================================================================================
@brief	コライダーリストのアクティベート一括処理
@param	bool
@return void
====================================================================================== */
void ColliderList::Activate(bool _flg) {
	for (auto itr = begin(); itr != end(); itr++) {
		(*itr)->Activate(_flg);
	}
}
